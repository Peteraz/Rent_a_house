package com.controller;  
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;  
import javax.servlet.http.HttpServletRequest;  
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;  
import org.springframework.ui.Model;  
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.common.TokenUtil;
import com.entity.domain.User;
import com.entity.service.IUserService;
import com.google.common.base.Preconditions;
@Controller  
@RequestMapping("/user")  
public class UserController {  
    @Resource  
    private IUserService userService;  
      
    @RequestMapping("/toLogin")  
    public String toLogin(HttpServletRequest request,Model model){  
    	return "WEB-INF/login";
    }  
    @RequestMapping("/toRegister")  
    public String toRegister(HttpServletRequest request,Model model){  
    	return "WEB-INF/register";
    }  
	/**
	 * 登录验证
	 */
	@RequestMapping(value = "/login",method = RequestMethod.POST,produces="application/json;charset=utf-8")
	@ResponseBody
	public String login(HttpServletRequest request,ModelMap modelMap,User user,String checkCode,HttpSession httpSession){
		try {
        	request.setCharacterEncoding("UTF-8");
            HttpSession session = request.getSession(true);
			Preconditions.checkArgument(StringUtils.isNotBlank(user.getUsername()), "用户名不能为空");
			Preconditions.checkArgument(StringUtils.isNotBlank(user.getPassword()), "密码不能为空");
			Preconditions.checkArgument(StringUtils.isNotBlank(checkCode), "验证码不能为空");
			Preconditions.checkArgument(checkCode.equalsIgnoreCase((String)session.getAttribute("checkcode")), "验证码输入错误");
			user.setPassword(TokenUtil.md5(user.getPassword()));
			User findUser = userService.getUserByNameAndPw(user);
			if(findUser!=null)
			{
				session.setAttribute("user", findUser);
				//httpSession.setAttribute("user", findUser);
				return this.jsonPrint(1, "登录成功", findUser);
			}
			else 
			{
				return this.jsonPrint(0, "账号或密码错误", "");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return this.jsonPrint(-1,e.getMessage(), null);
		}
	
	}
	/**
	 * 登出验证
	 */
	@RequestMapping(value = "/logout",method = RequestMethod.GET,produces="application/json;charset=utf-8")
	@ResponseBody
	public String logout(HttpServletRequest request,ModelMap modelMap){
		try {
			HttpSession session = request.getSession(true);
			session.setAttribute("user", null);
			return this.jsonPrint(1, "已安全登出", null);
		} catch (Exception e) {
			e.printStackTrace();
			return this.jsonPrint(-1,e.getMessage(), null);
		}
	
	}
	/**
	 * 注册
	 */
	@RequestMapping(value = "/register",method = RequestMethod.POST,produces="application/json;charset=utf-8")
	@ResponseBody
	public String register(HttpServletRequest request,ModelMap modelMap,User user,String checkCode,String rePassword ){
		try {
        	request.setCharacterEncoding("UTF-8");
            HttpSession session = request.getSession(true);
			Preconditions.checkArgument(StringUtils.isNotBlank(user.getUsername()), "用户名不能为空");
			User userTemp = new User();
			userTemp.setUsername(user.getUsername());
			Preconditions.checkArgument(userService.getUserByNameAndPw(userTemp)==null, "用户名已存在");
			Preconditions.checkArgument(StringUtils.isNotBlank(user.getName()), "姓名不能为空");
			Preconditions.checkArgument(StringUtils.isNotBlank(user.getPassword()), "密码不能为空");
			Preconditions.checkArgument(StringUtils.isNotBlank(rePassword), "请再次输入密码");
			Preconditions.checkArgument(rePassword.equals(user.getPassword()), "两次密码不一致");
			Preconditions.checkArgument(StringUtils.isNotBlank(user.getPhonenumber()), "电话号码不能为空");
			Preconditions.checkArgument(StringUtils.isNotBlank(checkCode), "验证码不能为空");
			Preconditions.checkArgument(checkCode.equalsIgnoreCase((String)session.getAttribute("checkcode")), "验证码输入错误");
			user.setPassword(TokenUtil.md5(user.getPassword()));
			userService.save(user);
			return this.jsonPrint(1, "注册成功", user);
		} catch (Exception e) {
			e.printStackTrace();
			return this.jsonPrint(-1,e.getMessage(), null);
		}
	
	}
	protected String jsonPrint(Integer status,String msg,Object data){
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("status", status);
		map.put("msg", msg);
		map.put("data", data);
		System.out.println(JSONArray.toJSONString(map));
		return JSONArray.toJSONString(map);
	}
}  
