/**   
 *  Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
* @Title: DateUtil.java 
* @Package com.jinan.common 
* @Description: TODO(用一句话描述该文件做什么) 
* @author leixiaolin  
* @date 2014-7-19 上午10:44:55 
* @version V1.0   
*/
package com.jinan.common;

/** 
 * @ClassName: DateUtil 
 * @Description: TODO(这里用一句话描述这个类的作用) 
 * @author Administrator 
 * @date 2014-7-19 上午10:44:55 
 * @version 1.0 
 */

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class DateUtil {
    public static void main(String[] args) {
//        System.out.println("当前小时开始："+getCurrentHourStartTime().toString());
//        System.out.println("当前小时结束："+getCurrentHourEndTime().toString());
//        System.out.println("当前天开始："+getCurrentDayStartTime().toString());
//        System.out.println("当前天时结束："+getCurrentDayEndTime().toString());
//        System.out.println("当前周开始："+getCurrentWeekDayStartTime().toString());
//        System.out.println("当前周结束："+getCurrentWeekDayEndTime().toString());
//        System.out.println("当前月开始："+getCurrentMonthStartTime().toString());
//        System.out.println("当前月结束："+getCurrentMonthEndTime().toString());
//        System.out.println("当前季度开始："+getCurrentQuarterStartTime().toString());
//        System.out.println("当前季度结束："+getCurrentQuarterEndTime().toString());
//        System.out.println("当前半年/后半年开始："+getHalfYearStartTime().toString());
//        System.out.println("当前半年/后半年结束："+getHalfYearEndTime().toString());
//        System.out.println("当前年开始："+getCurrentYearStartTime().toString());
//        System.out.println("当前年结束："+getCurrentYearEndTime().toString());
//        
//        String s = DateFormat.getDateInstance(DateFormat.DEFAULT).format(getCurrentQuarterStartTime());
//        System.out.println(s);
        
        //System.out.println(getCurrentMonthDays());
    	System.out.println(checkNickName("pp111"));
        
    }
    
    

    /**
     * 获取 当前年、半年、季度、月、日、小时 开始结束时间
     */

    private final static SimpleDateFormat shortSdf = new SimpleDateFormat("yyyy-MM-dd");
    private final static SimpleDateFormat longHourSdf = new SimpleDateFormat("yyyy-MM-dd HH");;
    private final static SimpleDateFormat longSdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");;
    public static boolean checkEmail(String email)
    {// 验证邮箱的正则表达式 
     String format = "\\w{2,20}[@][a-z0-9]{2,}[.]\\p{Lower}{2,}";
     //p{Alpha}:内容是必选的，和字母字符[\p{Lower}\p{Upper}]等价。如：200896@163.com不是合法的。
     //w{2,15}: 2~15个[a-zA-Z_0-9]字符；w{}内容是必选的。 如：dyh@152.com是合法的。
     //[a-z0-9]{3,}：至少三个[a-z0-9]字符,[]内的是必选的；如：dyh200896@16.com是不合法的。
     //[.]:'.'号时必选的； 如：dyh200896@163com是不合法的。
     //p{Lower}{2,}小写字母，两个以上。如：dyh200896@163.c是不合法的。
     //\u4e00-\u9fa5判断是否是中文
     if (email.matches(format))
      { 
       return true;// 邮箱名合法，返回true 
      }
     else
      {
       return false;// 邮箱名不合法，返回false
      }
    } 
    public static boolean checkUserName(String userName)
    {
    	String format = "\\w{2,20}";
    	if (userName.matches(format))
    	{ 
    		return true;// 用户名合法，返回true 
    	}
    	else
    	{
    		return false;// 用户名不合法，返回false
    	}
    } 
    public static boolean checkNickName(String nickName)
    {
    	String format = "[\u4e00-\u9fa5a-zA-Z_0-9·-]{1,20}";
    	if (nickName.matches(format))
    	{ 
    		return true;// 用户名合法，返回true 
    	}
    	else
    	{
    		return false;// 用户名不合法，返回false
    	}
    } 
    /**
     * String 转化Calendar，即2012-01-1
     * 
     * @return
     */
    public static Calendar stringToCalendar(String dateStr)
    {
        
        Date date = null;
        
        Calendar calendar = null;
        try
        {
            date = shortSdf.parse(dateStr);
            
            calendar = Calendar.getInstance();
            
            calendar.setTime(date);
        }
        catch(ParseException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        return calendar;
    }
    /**
     * 获取当前月的天数
     */
    public static int getCurrentMonthDays()
    {
		Calendar aCalendar = Calendar.getInstance(Locale.CHINA);
		int days=aCalendar.getActualMaximum(Calendar.DATE);
		return days;
    }
   /**
    * 获取本月所有天数
    */
	public static List<String> getAllTheDateOftheMonth() { 
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");   
		List<String> list = new ArrayList<String>();
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.DATE, 1);
		int month = cal.get(Calendar.MONTH);
		while(cal.get(Calendar.MONTH) == month){
			list.add(sdf.format(cal.getTime()));
			cal.add(Calendar.DATE, 1);
		}
		return list;
	}


    /**
     * 根据日期获取所在季度的开始时间，即2012-01-1 00:00:00
     * 
     * @return
     */
    public static Date getQuarterStartTime(String dateStr) {
        Calendar c = stringToCalendar(dateStr);
        int currentMonth = c.get(Calendar.MONTH) + 1;
        Date now = null;
        try {
            if (currentMonth >= 1 && currentMonth <= 3)
                c.set(Calendar.MONTH, 0);
            else if (currentMonth >= 4 && currentMonth <= 6)
                c.set(Calendar.MONTH, 3);
            else if (currentMonth >= 7 && currentMonth <= 9)
                c.set(Calendar.MONTH, 6);
            else if (currentMonth >= 10 && currentMonth <= 12)
                c.set(Calendar.MONTH, 9);
            c.set(Calendar.DATE, 1);
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 00:00:00");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 根据日期获取所在季度的结束时间，即2012-03-31 23:59:59
     * 
     * @return
     */
    public static Date getQuarterEndTime(String dateStr) {
        Calendar c = stringToCalendar(dateStr);;
        int currentMonth = c.get(Calendar.MONTH) + 1;
        Date now = null;
        try {
            if (currentMonth >= 1 && currentMonth <= 3) {
                c.set(Calendar.MONTH, 2);
                c.set(Calendar.DATE, 31);
            } else if (currentMonth >= 4 && currentMonth <= 6) {
                c.set(Calendar.MONTH, 5);
                c.set(Calendar.DATE, 30);
            } else if (currentMonth >= 7 && currentMonth <= 9) {
                c.set(Calendar.MONTH, 8);
                c.set(Calendar.DATE, 30);
            } else if (currentMonth >= 10 && currentMonth <= 12) {
                c.set(Calendar.MONTH, 11);
                c.set(Calendar.DATE, 31);
            }
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 获得本周的第一天，周一
     * 
     * @return
     */
    public static Date getCurrentWeekDayStartTime() {
        Calendar c = Calendar.getInstance();
        try {
            int weekday = c.get(Calendar.DAY_OF_WEEK) - 2;
            c.add(Calendar.DATE, -weekday);
            c.setTime(longSdf.parse(shortSdf.format(c.getTime()) + " 00:00:00"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return c.getTime();
    }

    /**
     * 获得本周的最后一天，周日
     * 
     * @return
     */
    public static Date getCurrentWeekDayEndTime() {
        Calendar c = Calendar.getInstance();
        try {
            int weekday = c.get(Calendar.DAY_OF_WEEK);
            c.add(Calendar.DATE, 8 - weekday);
            c.setTime(longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return c.getTime();
    }

    /**
     * 获得本天的开始时间，即2012-01-01 00:00:00
     * 
     * @return
     */
    public static Date getCurrentDayStartTime() {
        Date now = new Date();
        try {
            now = shortSdf.parse(shortSdf.format(now));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 获得本天的结束时间，即2012-01-01 23:59:59
     * 
     * @return
     */
    public static Date getCurrentDayEndTime() {
        Date now = new Date();
        try {
            now = longSdf.parse(shortSdf.format(now) + " 23:59:59");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 获得本小时的开始时间，即2012-01-01 23:59:59
     * 
     * @return
     */
    public static Date getCurrentHourStartTime() {
        Date now = new Date();
        try {
            now = longHourSdf.parse(longHourSdf.format(now));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 获得本小时的结束时间，即2012-01-01 23:59:59
     * 
     * @return
     */
    public static Date getCurrentHourEndTime() {
        Date now = new Date();
        try {
            now = longSdf.parse(longHourSdf.format(now) + ":59:59");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 获得本月的开始时间，即2012-01-01 00:00:00
     * 
     * @return
     */
    public static Date getCurrentMonthStartTime() {
        Calendar c = Calendar.getInstance();
        Date now = null;
        try {
            c.set(Calendar.DATE, 1);
            now = shortSdf.parse(shortSdf.format(c.getTime()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 当前月的结束时间，即2012-01-31 23:59:59
     * 
     * @return
     */
    public static Date getCurrentMonthEndTime() {
        Calendar c = Calendar.getInstance();
        Date now = null;
        try {
            c.set(Calendar.DATE, 1);
            c.add(Calendar.MONTH, 1);
            c.add(Calendar.DATE, -1);
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 当前年的开始时间，即2012-01-01 00:00:00
     * 
     * @return
     */
    public static Date getCurrentYearStartTime() {
        Calendar c = Calendar.getInstance();
        Date now = null;
        try {
            c.set(Calendar.MONTH, 0);
            c.set(Calendar.DATE, 1);
            now = shortSdf.parse(shortSdf.format(c.getTime()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 当前年的结束时间，即2012-12-31 23:59:59
     * 
     * @return
     */
    public static Date getCurrentYearEndTime() {
        Calendar c = Calendar.getInstance();
        Date now = null;
        try {
            c.set(Calendar.MONTH, 11);
            c.set(Calendar.DATE, 31);
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 当前季度的开始时间，即2012-01-1 00:00:00
     * 
     * @return
     */
    public static Date getCurrentQuarterStartTime() {
        Calendar c = Calendar.getInstance();
        int currentMonth = c.get(Calendar.MONTH) + 1;
        Date now = null;
        try {
            if (currentMonth >= 1 && currentMonth <= 3)
                c.set(Calendar.MONTH, 0);
            else if (currentMonth >= 4 && currentMonth <= 6)
                c.set(Calendar.MONTH, 3);
            else if (currentMonth >= 7 && currentMonth <= 9)
                c.set(Calendar.MONTH, 6);
            else if (currentMonth >= 10 && currentMonth <= 12)
                c.set(Calendar.MONTH, 9);
            c.set(Calendar.DATE, 1);
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 00:00:00");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 当前季度的结束时间，即2012-03-31 23:59:59
     * 
     * @return
     */
    public static Date getCurrentQuarterEndTime() {
        Calendar c = Calendar.getInstance();
        int currentMonth = c.get(Calendar.MONTH) + 1;
        Date now = null;
        try {
            if (currentMonth >= 1 && currentMonth <= 3) {
                c.set(Calendar.MONTH, 2);
                c.set(Calendar.DATE, 31);
            } else if (currentMonth >= 4 && currentMonth <= 6) {
                c.set(Calendar.MONTH, 5);
                c.set(Calendar.DATE, 30);
            } else if (currentMonth >= 7 && currentMonth <= 9) {
                c.set(Calendar.MONTH, 8);
                c.set(Calendar.DATE, 30);
            } else if (currentMonth >= 10 && currentMonth <= 12) {
                c.set(Calendar.MONTH, 11);
                c.set(Calendar.DATE, 31);
            }
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }

    /**
     * 获取前/后半年的开始时间
     * 
     * @return
     */
    public static Date getHalfYearStartTime() {
        Calendar c = Calendar.getInstance();
        int currentMonth = c.get(Calendar.MONTH) + 1;
        Date now = null;
        try {
            if (currentMonth >= 1 && currentMonth <= 6) {
                c.set(Calendar.MONTH, 0);
            } else if (currentMonth >= 7 && currentMonth <= 12) {
                c.set(Calendar.MONTH, 6);
            }
            c.set(Calendar.DATE, 1);
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 00:00:00");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;

    }

    /**
     * 获取前/后半年的结束时间
     * 
     * @return
     */
    public static Date getHalfYearEndTime() {
        Calendar c = Calendar.getInstance();
        int currentMonth = c.get(Calendar.MONTH) + 1;
        Date now = null;
        try {
            if (currentMonth >= 1 && currentMonth <= 6) {
                c.set(Calendar.MONTH, 5);
                c.set(Calendar.DATE, 30);
            } else if (currentMonth >= 7 && currentMonth <= 12) {
                c.set(Calendar.MONTH, 11);
                c.set(Calendar.DATE, 31);
            }
            now = longSdf.parse(shortSdf.format(c.getTime()) + " 23:59:59");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return now;
    }
    
    /**
     * 获取当前时间所属上课时段(校本部)
     * 
     * @return
     */
    @SuppressWarnings("deprecation")
    public static  String getRangeTime() 
    {
        String reStr = "-1";
        
        Calendar c = Calendar.getInstance();        
        Date now = c.getTime();
        int   week   =   c.get(Calendar.DAY_OF_WEEK)-1;  
        
        //判断是否为周末
        if(0 == week || 6 == week)
        {
            return reStr;
        }

        
        Date begin1 = c.getTime();
        begin1.setHours(8);
        begin1.setMinutes(0);
        begin1.setSeconds(0);
        Date end1 = c.getTime();
        end1.setHours(8);
        end1.setMinutes(45);
        end1.setSeconds(0);
        
        Date begin2 = c.getTime();
        begin2.setHours(8);
        begin2.setMinutes(55);
        begin2.setSeconds(0);
        Date end2 = c.getTime();
        end2.setHours(9);
        end2.setMinutes(40);
        end2.setSeconds(0);
        
        Date begin3 = c.getTime();
        begin3.setHours(10);
        begin3.setMinutes(0);
        begin3.setSeconds(0);
        Date end3 = c.getTime();
        end3.setHours(10);
        end3.setMinutes(45);
        end3.setSeconds(0);
        
        Date begin4 = c.getTime();
        begin4.setHours(10);
        begin4.setMinutes(55);
        begin4.setSeconds(0);
        Date end4 = c.getTime();
        end4.setHours(11);
        end4.setMinutes(40);
        end4.setSeconds(0);
        
        Date begin7 = c.getTime();
        begin7.setHours(14);
        begin7.setMinutes(30);
        begin7.setSeconds(0);
        Date end7 = c.getTime();
        end7.setHours(15);
        end7.setMinutes(15);
        end7.setSeconds(0);
        
        Date begin8 = c.getTime();
        begin8.setHours(15);
        begin8.setMinutes(25);
        begin8.setSeconds(0);
        Date end8 = c.getTime();
        end8.setHours(16);
        end8.setMinutes(10);
        end8.setSeconds(0);
        
        Date begin9 = c.getTime();
        begin9.setHours(16);
        begin9.setMinutes(20);
        begin9.setSeconds(0);
        Date end9 = c.getTime();
        end9.setHours(17);
        end9.setMinutes(5);
        end9.setSeconds(0);
        
        Date begin11 = c.getTime();
        begin11.setHours(19);
        begin11.setMinutes(0);
        begin11.setSeconds(0);
        Date end11 = c.getTime();
        end11.setHours(19);
        end11.setMinutes(45);
        end11.setSeconds(0);
        
        Date begin12 = c.getTime();
        begin12.setHours(19);
        begin12.setMinutes(55);
        begin12.setSeconds(0);
        Date end12 = c.getTime();
        end12.setHours(20);
        end12.setMinutes(40);
        end12.setSeconds(0);
        
        Date begin13 = c.getTime();
        begin13.setHours(20);
        begin13.setMinutes(50);
        begin13.setSeconds(0);
        Date end13 = c.getTime();
        end13.setHours(21);
        end13.setMinutes(35);
        end13.setSeconds(0);
        
        if((now.after(begin1) && now.before(end1)) || (now.after(begin2) && now.before(end2)))
        {
            reStr = "1";
        }
        else if((now.after(begin3) && now.before(end3)) || (now.after(begin4) && now.before(end4)))
        {
            reStr = "2";
        }
        
        else if((now.after(begin7) && now.before(end7)) || (now.after(begin8) && now.before(end8)) || (now.after(begin9) && now.before(end9)))
        {
            reStr = "3";
        }
        
        else if((now.after(begin11) && now.before(end11)) || (now.after(begin12) && now.before(end12)) || (now.after(begin13) && now.before(end13)))
        {
            reStr = "3";
        }
        
        return reStr;
        
    }
    
    
    /**
     * 获取当前时间所属上课时段(南校区)
     * 
     * @return
     */
    @SuppressWarnings("deprecation")
    public static  String getRangeTimeSouth() 
    {
        String reStr = "-1";
        
        Calendar c = Calendar.getInstance();        
        Date now = c.getTime();
        int   week   =   c.get(Calendar.DAY_OF_WEEK)-1;  
        
        //判断是否为周末
        if(0 == week || 6 == week)
        {
            return reStr;
        }

        
        Date begin1 = c.getTime();
        begin1.setHours(8);
        begin1.setMinutes(30);
        begin1.setSeconds(0);
        Date end1 = c.getTime();
        end1.setHours(9);
        end1.setMinutes(15);
        end1.setSeconds(0);
        
        Date begin2 = c.getTime();
        begin2.setHours(9);
        begin2.setMinutes(25);
        begin2.setSeconds(0);
        Date end2 = c.getTime();
        end2.setHours(10);
        end2.setMinutes(10);
        end2.setSeconds(0);
        
        Date begin3 = c.getTime();
        begin3.setHours(10);
        begin3.setMinutes(30);
        begin3.setSeconds(0);
        Date end3 = c.getTime();
        end3.setHours(11);
        end3.setMinutes(15);
        end3.setSeconds(0);
        
        Date begin4 = c.getTime();
        begin4.setHours(11);
        begin4.setMinutes(25);
        begin4.setSeconds(0);
        Date end4 = c.getTime();
        end4.setHours(12);
        end4.setMinutes(10);
        end4.setSeconds(0);
        
        Date begin7 = c.getTime();
        begin7.setHours(14);
        begin7.setMinutes(0);
        begin7.setSeconds(0);
        Date end7 = c.getTime();
        end7.setHours(14);
        end7.setMinutes(45);
        end7.setSeconds(0);
        
        Date begin8 = c.getTime();
        begin8.setHours(14);
        begin8.setMinutes(55);
        begin8.setSeconds(0);
        Date end8 = c.getTime();
        end8.setHours(15);
        end8.setMinutes(40);
        end8.setSeconds(0);
        
        Date begin9 = c.getTime();
        begin9.setHours(15);
        begin9.setMinutes(50);
        begin9.setSeconds(0);
        Date end9 = c.getTime();
        end9.setHours(16);
        end9.setMinutes(35);
        end9.setSeconds(0);
        
        Date begin11 = c.getTime();
        begin11.setHours(18);
        begin11.setMinutes(30);
        begin11.setSeconds(0);
        Date end11 = c.getTime();
        end11.setHours(19);
        end11.setMinutes(15);
        end11.setSeconds(0);
        
        Date begin12 = c.getTime();
        begin12.setHours(19);
        begin12.setMinutes(25);
        begin12.setSeconds(0);
        Date end12 = c.getTime();
        end12.setHours(20);
        end12.setMinutes(10);
        end12.setSeconds(0);
        
        Date begin13 = c.getTime();
        begin13.setHours(20);
        begin13.setMinutes(20);
        begin13.setSeconds(0);
        Date end13 = c.getTime();
        end13.setHours(21);
        end13.setMinutes(05);
        end13.setSeconds(0);
        
        if((now.after(begin1) && now.before(end1)) || (now.after(begin2) && now.before(end2)))
        {
            reStr = "1";
        }
        else if((now.after(begin3) && now.before(end3)) || (now.after(begin4) && now.before(end4)))
        {
            reStr = "2";
        }
        
        else if((now.after(begin7) && now.before(end7)) || (now.after(begin8) && now.before(end8)) || (now.after(begin9) && now.before(end9)))
        {
            reStr = "3";
        }
        
        else if((now.after(begin11) && now.before(end11)) || (now.after(begin12) && now.before(end12)) || (now.after(begin13) && now.before(end13)))
        {
            reStr = "3";
        }
        
        return reStr;
        
    }
    
    
    /**
     * 获取星期几
     * 
     * @return
     */
    public static  String getWeekStr() 
    {
        String weekStr = null;
        Calendar   calendar   =   Calendar.getInstance();   
        int   week   =   calendar.get(Calendar.DAY_OF_WEEK)-1;   
        switch(week){   
                case   0:   
                        weekStr   =   "星期日";   
                        break;   
                case   1:   
                        weekStr   =   "星期一";   
                        break;   
                case   2:   
                        weekStr   =   "星期二";   
                        break;   
                case   3:   
                        weekStr   =   "星期三";   
                        break;   
                case   4:   
                        weekStr   =   "星期四";   
                        break;   
                case   5:   
                        weekStr   =   "星期五";   
                        break;   
                case   6:   
                        weekStr   =   "星期六";   
                        break;   
        }   
        
        return weekStr;

    }

}

